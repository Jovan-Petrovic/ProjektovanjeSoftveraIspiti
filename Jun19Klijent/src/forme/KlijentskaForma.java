/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Linija;
import domen.Stanica;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import konstante.Operacije;
import logika.KomunikacijaSaServerom;
import modeli.ModelTabeleMedjustanica;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Bron Zilar
 */
public class KlijentskaForma extends javax.swing.JFrame {

    /**
     * Creates new form KlijentskaForma
     */
    public KlijentskaForma() {
        initComponents();
        pripremiFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxtNazivLinije = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jcmbPocetnaStanica = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jcmbKrajnjaStanica = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jcmbMedjustanice = new javax.swing.JComboBox();
        jbtnDodajMedjustanicu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblMedjustanice = new javax.swing.JTable();
        jbtnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos linije"));

        jLabel1.setText("Naziv linije");

        jLabel2.setText("Pocetna stanica");

        jcmbPocetnaStanica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Krajnja stanica");

        jcmbKrajnjaStanica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Medjustanice");

        jcmbMedjustanice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbtnDodajMedjustanicu.setText("Dodaj medjustanicu");
        jbtnDodajMedjustanicu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajMedjustanicuActionPerformed(evt);
            }
        });

        jtblMedjustanice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblMedjustanice);

        jbtnSacuvaj.setText("Sacuvaj");
        jbtnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtNazivLinije)
                            .addComponent(jcmbPocetnaStanica, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcmbKrajnjaStanica, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcmbMedjustanice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnDodajMedjustanicu)
                            .addComponent(jbtnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtNazivLinije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbPocetnaStanica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcmbKrajnjaStanica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcmbMedjustanice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbtnDodajMedjustanicu)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbtnSacuvaj)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDodajMedjustanicuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajMedjustanicuActionPerformed
        Stanica medjustanica = (Stanica) jcmbMedjustanice.getSelectedItem();
        ModelTabeleMedjustanica mtm = (ModelTabeleMedjustanica) jtblMedjustanice.getModel();
        mtm.dodajMedjustanicu(medjustanica);
    }//GEN-LAST:event_jbtnDodajMedjustanicuActionPerformed

    private void jbtnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSacuvajActionPerformed
        String nazivLinije = jtxtNazivLinije.getText().trim();
        Stanica pocetnaStanica = (Stanica) jcmbPocetnaStanica.getSelectedItem();
        Stanica krajnjaStanica = (Stanica) jcmbKrajnjaStanica.getSelectedItem();
        ModelTabeleMedjustanica mtm = (ModelTabeleMedjustanica) jtblMedjustanice.getModel();
        ArrayList<Stanica> medjustanice = mtm.getStanice();
        
        if(pocetnaStanica.equals(krajnjaStanica)) {
            JOptionPane.showMessageDialog(this, "Pocetna i krajnja stanica moraju biti razlicite");
            return;
        }
        
        if(medjustanice.contains(pocetnaStanica) || medjustanice.contains(krajnjaStanica)) {
            JOptionPane.showMessageDialog(this, "Pocetna i krajnja stanica ne smeju biti medjustanice");
            return;
        }
        
        if(medjustanice.size() < 1) {
             JOptionPane.showMessageDialog(this, "Linija mora imati bar jednu medjustanicu");
            return;
        }
        
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_LINIJE);
        KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
        ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Linija> linije = (ArrayList<Linija>) so.getOdgovor();
        ArrayList<Integer> medjustaniceID1 = new ArrayList<>();
        for (Stanica s : medjustanice) {
            medjustaniceID1.add(s.getStanicaID());
        }
        int br = 0;
        boolean flag1 = true;
        for (Linija linija : linije) {
            boolean flag = false;
            if(linija.getNazivLinije().equals(nazivLinije)) {
                flag1 = false;
                KlijentskiZahtev kz1 = new KlijentskiZahtev();
                kz1.setOperacija(Operacije.VRATI_MEDJUSTANICE_ZA_LINIJU);
                kz1.setParametar(linija.getLinijaID());
                KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);
                ServerskiOdgovor so1 = KomunikacijaSaServerom.getInstanca().primiOdgovor();
                ArrayList<Integer> medjustaniceID2 = (ArrayList<Integer>) so1.getOdgovor();
                
                for(Integer i : medjustaniceID1) {
                    if(!medjustaniceID2.contains(i)) {
                        flag = true;
                        break;
                    }
                }
                for(Integer i : medjustaniceID2) {
                    if(!medjustaniceID1.contains(i)) {
                        flag = true;
                        break;
                    }
                }
            }
            if(flag) {
                break;
            }
            br++;
        }
        if(br==linije.size() && !flag1) {
            JOptionPane.showMessageDialog(this, "Uneta linija vec postoji");
            return;
        }
        Linija linija = new Linija(-1, nazivLinije, pocetnaStanica, krajnjaStanica);
        Map<String,Object> mapa = new HashMap<>();
        mapa.put("linija", linija);
        mapa.put("medjustanice", medjustaniceID1);
        KlijentskiZahtev kz2 = new KlijentskiZahtev();
        kz2.setOperacija(Operacije.SACUVAJ);
        kz2.setParametar(mapa);
        KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz2);
        ServerskiOdgovor so2 = KomunikacijaSaServerom.getInstanca().primiOdgovor();
        JOptionPane.showMessageDialog(this, so2.getPoruka());
    }//GEN-LAST:event_jbtnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlijentskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlijentskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlijentskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlijentskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlijentskaForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodajMedjustanicu;
    private javax.swing.JButton jbtnSacuvaj;
    private javax.swing.JComboBox jcmbKrajnjaStanica;
    private javax.swing.JComboBox jcmbMedjustanice;
    private javax.swing.JComboBox jcmbPocetnaStanica;
    private javax.swing.JTable jtblMedjustanice;
    private javax.swing.JTextField jtxtNazivLinije;
    // End of variables declaration//GEN-END:variables

    private void pripremiFormu() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_STANICE);
        KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);
        ServerskiOdgovor so = KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Stanica> stanice = (ArrayList<Stanica>) so.getOdgovor();
        
        jcmbPocetnaStanica.removeAllItems();
        for (Stanica stanica : stanice) {
            jcmbPocetnaStanica.addItem(stanica);
        }
        
        jcmbKrajnjaStanica.removeAllItems();
        for (Stanica stanica : stanice) {
            jcmbKrajnjaStanica.addItem(stanica);
        }
        
        jcmbMedjustanice.removeAllItems();
        for (Stanica stanica : stanice) {
            jcmbMedjustanice.addItem(stanica);
        }
        
        ModelTabeleMedjustanica mtm = new ModelTabeleMedjustanica();
        jtblMedjustanice.setModel(mtm);
    }
}
